#ifndef FONT_H
#define FONT_H

/*
 *  A 4x8 bitmap font. Each letter uses only 3 bytes
 */ 
static unsigned char font[] = {
    // Free characters
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,
    0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,  0xee, 0xee, 0xe0,

    0x00, 0x00, 0x00,  0x22, 0x20, 0x20,  0xaa, 0x00, 0x00,  0xae, 0xae, 0xa0, // [space] ! " #
    0x6c, 0x6c, 0x40,  0x82, 0x48, 0x20,  0xcc, 0xea, 0x60,  0x44, 0x00, 0x00, // $ % & '
    0x24, 0x44, 0x20,  0x84, 0x44, 0x80,  0xa4, 0xa0, 0x00,  0x04, 0xe4, 0x00, // ( ) * +
    0x00, 0x04, 0x80,  0x00, 0xe0, 0x00,  0x00, 0x00, 0x40,  0x22, 0x48, 0x80, // , - . /
    0x6a, 0xaa, 0xc0,  0x4c, 0x44, 0x40,  0xc2, 0x48, 0xe0,  0xc2, 0x42, 0xc0, // 0 1 2 3
    0xaa, 0xe2, 0x20,  0xe8, 0xc2, 0xc0,  0x68, 0xea, 0xe0,  0xe2, 0x48, 0x80, // 4 5 6 7
    0xea, 0xea, 0xe0,  0xea, 0xe2, 0xc0,  0x04, 0x04, 0x00,  0x04, 0x04, 0x80, // 8 9 : ;
    0x24, 0x84, 0x20,  0x84, 0x24, 0x80,  0x0e, 0x0e, 0x00,  0xe2, 0x40, 0x40, // < = > ?

    0x4a, 0xe8, 0x60,  0x4a, 0xea, 0xa0,  0xca, 0xca, 0xc0,  0x68, 0x88, 0x60, // @ A B C
    0xca, 0xaa, 0xc0,  0xe8, 0xe8, 0xe0,  0xe8, 0xe8, 0x80,  0x68, 0xea, 0x60, // D E F G
    0xaa, 0xea, 0xa0,  0xe4, 0x44, 0xe0,  0x22, 0x2a, 0x40,  0xaa, 0xca, 0xa0, // H I J K
    0x88, 0x88, 0xe0,  0xae, 0xea, 0xa0,  0xae, 0xee, 0xa0,  0x4a, 0xaf, 0x40, // L M N O
    0xca, 0xa8, 0x80,  0x4a, 0xae, 0x60,  0xca, 0xec, 0xa0,  0x68, 0x42, 0xc0, // P Q R S
    0xe4, 0x44, 0x40,  0xaa, 0xaa, 0x60,  0xaa, 0xa4, 0x40,  0xaa, 0xee, 0xa0, // T U V W
    0xaa, 0x4a, 0xa0,  0xaa, 0x44, 0x40,  0xe2, 0x48, 0xe0,  0xe8, 0x88, 0xe0, // X Y Z [
    0x08, 0x42, 0x00,  0xe2, 0x22, 0xe0,  0x4a, 0x00, 0x00,  0x00, 0x00, 0xe0, // \ ] ^ _

    0x84, 0x00, 0x00,  0x0c, 0x6a, 0xe0,  0x8c, 0xaa, 0xe0,  0x06, 0x88, 0x60, // ` a b c
    0x26, 0xaa, 0x60,  0x06, 0xac, 0x60,  0x24, 0xe4, 0x40,  0x06, 0xae, 0x24, // d e f g
    0x8c, 0xaa, 0xa0,  0x40, 0x44, 0x40,  0x20, 0x22, 0xa4,  0x8a, 0xcc, 0xa0, // h i j k
    0xc4, 0x44, 0xe0,  0x0e, 0xee, 0xa0,  0x0c, 0xaa, 0xa0,  0x04, 0xaa, 0x40, // l m n o
    0x0c, 0xaa, 0xc8,  0x06, 0xaa, 0x62,  0x06, 0x88, 0x80,  0x06, 0xc6, 0xc0, // p q r s
    0x4e, 0x44, 0x60,  0x0a, 0xaa, 0x60,  0x0a, 0xae, 0x40,  0x0a, 0xee, 0xe0, // t u v w
    0x0a, 0x44, 0xa0,  0x0a, 0xa6, 0x24,  0x0e, 0x6c, 0xe0,  0x64, 0x84, 0x60, // x y z {
    0x44, 0x44, 0x40,  0xc4, 0x24, 0xc0,  0x6c, 0x00, 0x00,  0xee, 0xee, 0xe0  // | } ~ 
};

static void render_character(char character, int *buffer, int x, int y, int width) {
    int offset = x + y * width;
    int ci = character * 3;
    for(int i = 0; i < 3; i++) {
        if(font[ci + i] & 1 << 3)      buffer[offset + width] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 2) buffer[offset + 1 + width] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 1) buffer[offset + 2 + width] = 0xFFFFFFFF;
        if(font[ci + i] & 1) buffer[offset + 3 + width] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 7) buffer[offset] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 6) buffer[offset + 1] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 5) buffer[offset + 2] = 0xFFFFFFFF;
        if(font[ci + i] & 1 << 4) buffer[offset + 3] = 0xFFFFFFFF;
        offset += width * 2;
    }
}

#endif
